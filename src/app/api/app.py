# Импорт штуки, которая запускает твой сервер. Этот код уже написан и ты
# скачиваешь его как библиотеку. Версия и название библиотеки указано в
# requirements.txt. Библиотеки устанавкливаются с помошью пакетного менеджера
# для питона пакетный менеджер называет pip. Он контролирует всю установку
# Чтобы установить пакеты нужно ввести команду pip install -r requirements.txt
import uvicorn
# Импорт класса FastAPI из пакета fastapi. Класс это "чертеж" для чего-то
# что ты хочешь использовать. Если ты сделаешь FastApi() - ты получишь объект,
# созданный по указанному чертежу. Это называется "инстанс" или "экземпляр"
# класса. Каждый экземпляр может содержать внутри логику или информацию об
# этом объекте
from fastapi import FastAPI

# Тут мы импортируем инстанс api_router создание которого описано в
# app.api.v1.__init__.py. Так же мы называем его другим имененем -
# api_router_v1
from app.api.v1 import api_router as api_router_v1

# Глобальная переменная в которой будет хранится Инстанс (экземпляр) объекта
# FastAPI
_app: FastAPI = None  # type: ignore


# Эта функция вернет объект приложения если ранее была вызвана set_app
# вызов функции осуществляется путем указания () например set_app()
# внуть скобок можно "прокинуть" параметры фукнции, если они описаны
def app() -> FastAPI:
    # Функция вернет значение хранящееся в переменной _app
    return _app


# Эта функция при вызове создает объект FastApi
# FastApi - это веб сервер который принимает запросы и обрабатывает запросы
# которые описаны в файле main. Main лежит по пути:
# app/v1/endpoints/main
# путь в браузере для запросов: http://0.0.0.0:9001/v1/ + путь указанный в
# роутере + путь указанный в функции. Для endpoint "main" путь:
# http://0.0.0.0:9001/v1/main/
def set_app() -> FastAPI:
    # Эта магия пока тебе не интересна =)
    global _app

    # Если set_app уже была вызвана ранее мы кидаем ошибку
    if _app is not None:
        raise Exception("FastAPI app was already set")

    # Создаем экземпляр используя "чертеж", передаем параметры для создания
    _app = FastAPI(
        debug=True,
        docs_url="/v1/docs/",
        version="1.0.0",
        title="Easy to Start Service",
        summary="Backend for the Manual Vetting Service",
    )
    # include_router - это метод экземпляра FastAPI. Вызываем его чтобы сказать
    # что эксземпляр класса FastApi должен вызывать функции помеченные
    # роутером api_router_v1. Таким образом когда ты все запустишь приложение
    # будет знать что по пути /v1/main/ нужно вызывать функцию main
    _app.include_router(api_router_v1, prefix="/v1")

    # возвращаем экземпляр FastApi как результат функции
    return _app


# Функция которая берет объект FastApi и запускает сервер у тебя на компьютере
def run_app() -> None:
    # создаем переменную application которая равна результату выполнения app
    application = app()

    # запускаем наш сервер на локальном хосте (0.0.0.0) на порту 9001
    uvicorn.run(application, host="0.0.0.0", port=9001)
